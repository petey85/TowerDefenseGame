help me build a scheduled power automate flow to run once a week, on Friday morning. I need this flow to look up my SharePoint list "TimesheetDetails" using the column "EmployeeEmail" which contains emails of users that I want emailed with this flow. The flow needs to check if a user in the list has submitted a timesheet this week, and it can do that by comparing flow to check every unique email against the current week end date, which uses the column "WeekEndNum" and is formatted in a date such as "20230812". Once the flow knows what the current week end date is, and captures each unique or distinct email in the last that matches that week end date, I want the flow to email each user. 
ChatGPT

Certainly! Here's a step-by-step guide to create a scheduled Power Automate flow to achieve your requirements:
1. Create a Scheduled Flow:

    Go to Power Automate and click on "Create".
    Select "Scheduled flow".
    Name your flow and set the start time and frequency. For your requirement, you'd set it to run every Friday morning.

2. Initialize Variables:

    Add an "Initialize variable" action.
        Name: currentWeekEndDate
        Type: String
        Value: Use an expression to get the current Friday's date in the format "yyyyMMdd". The expression would be:

        less

        formatDateTime(addDays(startOfWeek(utcNow(), 'Friday'), 6), 'yyyyMMdd')

3. Get Items from SharePoint:

    Add a "Get items" SharePoint action.
    Fill in the necessary details for your SharePoint site and list name ("TimesheetDetails").
    In the Filter Query, use:

    scss

    WeekEndNum eq '@{variables('currentWeekEndDate')}'

4. Parse Unique Emails:

    Add a "Select" Data Operations action.
        From: value from the previous SharePoint action.
        Map: Create a single entry with key as "Email" and value as the expression item()?['EmployeeEmail'].

    Add a "Union" Data Operations action to get distinct emails.
        From: Output of the previous "Select" action.
        From 2: Output of the previous "Select" action.

5. Loop Through Unique Emails and Send Email:

    Add an "Apply to each" control.
        Select an output from: Output of the "Union" action.

    Inside the loop, add an "Office 365 Outlook - Send an email" action.
        To: Current item from the loop (which is the email).
        Subject & Body: Whatever message you want to send.

6. Save and Test:

    Save your flow.
    You can test your flow by manually triggering it or waiting for the scheduled time.

This flow will run every Friday morning, check the SharePoint list for entries with the current week's end date, collect unique emails, and send an email to each of those addresses.
User
I get an error for the filter query you gave me "WeekEndNum eq '@{variables('currentWeekEndDate')}'". The error is when I try to enter it as an expression and it says "The expression is invalid"
ChatGPT

I apologize for the confusion. The Filter Query in the SharePoint "Get items" action doesn't directly support the use of expressions in the same way as other fields in Power Automate. Instead, you'll need to construct the Filter Query as a string.

Here's how you can correct it:

    Remove the expression from the Filter Query field.
    Directly in the Filter Query field (without switching to the expression editor), enter:

bash

WeekEndNum eq ''

    Place your cursor between the two single quotes.
    From the Dynamic content pane, select the currentWeekEndDate variable. This will insert the variable reference between the quotes.

Your Filter Query should now look something like:

arduino

WeekEndNum eq 'your-variable-reference-here'

Where your-variable-reference-here will be the actual reference to the currentWeekEndDate variable. Power Automate will handle the variable substitution for you when the flow runs.

Save your flow and try testing it again.
User
ok I did all that and tested the flow to see how it works. I get an error on the first initialize variable action in the flow that says: "Unable to process template language expressions in action 'Initialize_variable' inputs at line '0' and column '0': 'The template function 'startOfWeek' is not defined or not valid.'."
ChatGPT

I apologize for the oversight. The startOfWeek function is not available in Power Automate's expression language as of my last update. Instead, we'll need to use a different approach to get the current week's Friday date.

Here's a revised method to calculate the current week's Friday date:

    First, we'll determine the day of the week for the current date.
    Based on the day of the week, we'll calculate how many days we need to add to get to Friday.

Here's the revised expression:

plaintext

formatDateTime(addDays(utcNow(), add(5, sub(dayOfWeek(utcNow()), dayOfWeek('2023-08-04')))), 'yyyyMMdd')

Explanation:

    dayOfWeek(utcNow()): Gets the current day of the week as a number (0 for Sunday, 1 for Monday, etc.).
    dayOfWeek('2023-08-04'): This is a reference date that was a Friday to get the number representation of Friday.
    sub(dayOfWeek(utcNow()), dayOfWeek('2023-08-04')): This calculates the difference between today and the next Friday.
    add(5, ...): We add 5 to ensure we always move forward to the next Friday.
    addDays(utcNow(), ...): This adds the calculated number of days to the current date to get the date of the next Friday.
    formatDateTime(...): This formats the resulting date to the 'yyyyMMdd' format.

Replace the expression in your "Initialize variable" action with the revised expression above, and then test your flow again.
User
works great, but it is retrieving the wrong day of the week. I need it to find a weekend date, which is every saturday of the week, not every friday. The week end num needs to match 20230812 for example, which is a saturday.
ChatGPT

I apologize for the oversight. Let's adjust the expression to get the date for Saturday instead of Friday.

Here's the revised expression to calculate the current week's Saturday date:

plaintext

formatDateTime(addDays(utcNow(), add(6, sub(dayOfWeek(utcNow()), dayOfWeek('2023-08-05')))), 'yyyyMMdd')

Explanation:

    dayOfWeek('2023-08-05'): This is a reference date that was a Saturday to get the number representation of Saturday.
    The rest of the logic remains the same, but we're adjusting for Saturday instead of Friday.

Replace the expression in your "Initialize variable" action with the revised expression above to get the Saturday date, and then test your flow again.
User
awesome that works great for matching the saturday! Now let's continue building the flow
ChatGPT

Great! Now that we have the correct Saturday date, let's continue building the flow.

You've already set up the flow to retrieve items from SharePoint based on the WeekEndNum and initialized the currentWeekEndDate variable. The next steps involve parsing the unique emails and then sending out the emails.
4. Parse Unique Emails:

    Select Action:
        Add a "Select" Data Operations action.
        From: value from the previous SharePoint action.
        Map: Create a single entry with key as "Email" and value as the expression item()?['EmployeeEmail'].

    Union Action:
        Add a "Union" Data Operations action to get distinct emails.
        From: Output of the previous "Select" action.
        From 2: Output of the previous "Select" action.

5. Loop Through Unique Emails and Send Email:

    Apply to Each Control:
        Add an "Apply to each" control.
        Select an output from: Output of the "Union" action.

    Send Email:
        Inside the loop, add an "Office 365 Outlook - Send an email" action.
        To: Current item from the loop (which is the email).
        Subject & Body: Whatever message you want to send to remind the user about the timesheet.

6. Save and Test:

    Save your flow.
    You can test your flow by manually triggering it or waiting for the scheduled time.

Once you've set up these steps, your flow should be complete. It will run every Saturday morning, check the SharePoint list for entries with the current week's end date, collect unique emails, and send an email to each of those addresses reminding them about the timesheet.

Let me know if you need further assistance or if there are any other requirements you'd like to add to the flow!
User
I don't see "Union" as an option in power automate
ChatGPT

I apologize for the oversight. You're right; as of my last update, there isn't a direct "Union" action in Power Automate. Instead, we can achieve the goal of getting distinct emails using a combination of actions.

Here's how you can get distinct emails:
1. Initialize an Array Variable:

Before the "Get items" action, add an "Initialize variable" action.

    Name: DistinctEmails
    Type: Array
    Value: [] (an empty array)

2. Loop Through SharePoint Items:

    Add an "Apply to each" control.
        Select an output from: value from the "Get items" SharePoint action.

    Inside the loop:

        Add a "Condition" control to check if the current email is already in the DistinctEmails array.
            Use the expression: contains(variables('DistinctEmails'), items('Apply_to_each')?['EmployeeEmail'])
            This checks if the current email (items('Apply_to_each')?['EmployeeEmail']) is in the DistinctEmails array.

        In the "No" branch (meaning the email is not yet in the array):
            Add an "Append to array variable" action.
                Name: DistinctEmails
                Value: items('Apply_to_each')?['EmployeeEmail']

3. Loop Through Distinct Emails and Send Email:

    After the first "Apply to each" control, add another "Apply to each" control.
        Select an output from: DistinctEmails variable.

    Inside this loop:
        Add an "Office 365 Outlook - Send an email" action.
        To: Current item from the loop (which is the email).
        Subject & Body: Your desired message.

This approach uses two loops: the first loop goes through all SharePoint items and populates the DistinctEmails array with unique emails, and the second loop sends an email to each address in the DistinctEmails array.

Again, I apologize for the confusion earlier. Please implement these steps and let me know if you encounter any issues or have further questions!
User
Can you give more detail on step 2 "Inside the loop"? 
ChatGPT

Of course! I'll break down step 2 in more detail:
2. Loop Through SharePoint Items:
2.1. Apply to Each Control:

    Add an "Apply to each" control.
        For the input of this control, select the value from the "Get items" SharePoint action. This will loop through each item retrieved from SharePoint.

2.2. Inside the "Apply to each" loop:
2.2.1. Add a Condition Control:

    Add a "Condition" control inside the "Apply to each" loop. This condition will check if the current email is already in the DistinctEmails array.
        For the condition, you'll use the expression:

        scss

        contains(variables('DistinctEmails'), items('Apply_to_each')?['EmployeeEmail'])

        This expression checks if the current email (items('Apply_to_each')?['EmployeeEmail']) is contained in the DistinctEmails array.
        Set the condition to check if the result is false (meaning the email is not yet in the array).

2.2.2. If the Condition is False (No branch):

If the email is not already in the DistinctEmails array (meaning our condition evaluates to false), we want to add it to the array.

    In the "No" branch of the condition (which is executed when the condition is false):
        Add an "Append to array variable" action.
            For the "Name" field, select the DistinctEmails variable.
            For the "Value" field, use the dynamic content to select the EmployeeEmail from the current SharePoint item. This will add the current email to the DistinctEmails array.

You don't need to add anything to the "Yes" branch of the condition because if the email is already in the array, we simply move on to the next item.
2.3. End of the Loop:

    Once the loop has processed all SharePoint items, the DistinctEmails array will contain only unique email addresses.

After this step, you can proceed with the next steps to loop through the DistinctEmails array and send out emails.

I hope this provides a clearer breakdown of step 2. Let me know if you need further clarification on any part!
User
that seems to have worked, lets continue to build the flow please
ChatGPT

Fantastic! Now that we have an array of distinct emails, we can proceed to the next steps where we'll send out emails to each of these addresses.
3. Loop Through Distinct Emails and Send Email:
3.1. Apply to Each Control for Distinct Emails:

    Add another "Apply to each" control.
        For the input of this control, select the DistinctEmails variable. This will loop through each unique email address we've collected.

3.2. Inside the "Apply to each" loop for Distinct Emails:
3.2.1. Send Email:

    Add an "Office 365 Outlook - Send an email" action inside this loop.
        To: Use the dynamic content to select the current item from the loop, which will be the email address.
        Subject: Enter the subject of the email. For instance, "Timesheet Reminder".
        Body: Enter the body of the email. You can craft a message reminding the user about the timesheet. For example, "Hello, just a reminder to submit your timesheet for this week."

3.3. End of the Loop:

    Once the loop has processed all the distinct emails, each email address in the DistinctEmails array will have received a reminder email.

4. Finalize and Test:
4.1. Save:

    Save your flow to ensure all changes are stored.

4.2. Test:

    You can test your flow by manually triggering it. This will allow you to see if the emails are being sent out correctly. Ensure you have a test environment or a limited set of data to avoid sending out unnecessary emails during testing.

4.3. Monitor:

    After testing, monitor the flow for a few weeks to ensure it's working as expected every Saturday.

That's it! Your flow should now be complete. It will run every Saturday, check the SharePoint list for entries with the current week's end date, collect unique emails, and send an email to each of those addresses reminding them about the timesheet.

Let me know if you need further assistance, adjustments, or if there are any other requirements you'd like to add to the flow!
User
There are three items in my SharePoint list with the "WeekEndNum" date matching "20230812", but the flow doesn't seem to be finding them in the apply to each action after the "get Items" action. I am using the condition control in the apply to each action "contains(variables('DistinctEmails'), items('Apply_to_each')?['EmployeeEmail'])", but everything is equal to true when I test the flow
ChatGPT

If everything is evaluating to true in the condition control, it means that the flow thinks every email is already in the DistinctEmails array. This is unusual behavior, especially if the DistinctEmails array was initialized as empty at the start of the flow.

Let's troubleshoot this:
1. Check Initialization of DistinctEmails:

Ensure that the DistinctEmails array variable is initialized to an empty array ([]) before any actions that might add to it.
2. Review the SharePoint "Get items" Action:

Ensure that the "Get items" action is correctly retrieving the items from SharePoint. You can check the output of this action in the flow run history to see if it's pulling the expected items.
3. Modify the Condition:

The condition contains(variables('DistinctEmails'), items('Apply_to_each')?['EmployeeEmail']) checks if the current email is already in the DistinctEmails array. If it's always evaluating to true, let's try a different approach:
3.1. Use a Counter:

    Initialize a new integer variable named EmailCounter at the start of the flow and set its value to 0.
    Before the condition control, add an "Increment variable" action to increment EmailCounter by 1.
    Change the condition to check if EmailCounter is greater than the length of the DistinctEmails array. Use the expression:

    less

    length(variables('DistinctEmails'))

    If EmailCounter is greater, it means the current email hasn't been added to the array yet.

3.2. Adjust the "No" Branch:

    In the "No" branch of the condition (where you append to the DistinctEmails array), also reset the EmailCounter variable back to 0.

4. Test the Flow:

Run the flow again and check the results. Monitor the values of the DistinctEmails array and the EmailCounter variable throughout the flow run to see how they change.

This approach uses the counter to keep track of how many times we've seen the current email. If we've seen it more times than it appears in the DistinctEmails array, it means it's a new unique email and should be added to the array.

If the issue persists, there might be other factors at play, and we might need to look deeper into the flow's configuration and the data in SharePoint.
User
for step 3.2 Adjust the "No" Branch: I was wondering how to reset the 'EmailCounter' variable back to 0, can you explain
ChatGPT

Certainly! To reset the EmailCounter variable back to 0, you'll use the "Set variable" action. Here's how to do it:
3.2. Adjust the "No" Branch:

    Inside the "No" branch of the condition (after the "Append to array variable" action):

    Add a "Set variable" action:
        For the "Name" field, select the EmailCounter variable from the dropdown.
        For the "Value" field, set it to 0.

This action will reset the EmailCounter variable back to 0 every time a new unique email is added to the DistinctEmails array.

By doing this, you're ensuring that for each new unique email encountered in the SharePoint list, the counter starts from 0 again, allowing the flow to correctly identify and add unique emails to the array.

After adding this action, save and test your flow to see if it works as expected.
User
for step 3.1 I am having issues. can you explain it in greater detail please
ChatGPT

Of course! Let's break down step 3.1 in detail:
3.1. Use a Counter:

The idea behind using a counter is to keep track of how many times we've encountered a particular email. If we encounter an email more times than it's present in the DistinctEmails array, it means it's a new unique email.
3.1.1. Initialize the Counter:

    At the start of your flow, before any other actions:
        Add an "Initialize variable" action.
        Name the variable EmailCounter.
        Set the Type to Integer.
        Set the Value to 0.

This sets up a counter that starts at zero.
3.1.2. Increment the Counter for Each Email:

    Inside the "Apply to each" loop, but before the condition control:
        Add an "Increment variable" action.
        For the "Name" field, select the EmailCounter variable from the dropdown.
        For the "Value" field, set it to 1.

This action will increase the counter by 1 every time we process an email from the SharePoint list.
3.1.3. Adjust the Condition:

    Modify the existing condition control:
        Instead of the contains function, set the condition to check if the EmailCounter is greater than the length of the DistinctEmails array.
        Use the expression for the left side of the condition:

        scss

variables('EmailCounter')

Set the comparison to is greater than.
For the right side, use the expression:

less

        length(variables('DistinctEmails'))

This condition checks if we've encountered the current email more times than it's present in the DistinctEmails array. If true, it means it's a new unique email.
3.1.4. Continue with the "No" Branch:

If the condition evaluates to true (meaning it's a new unique email), the actions inside the "No" branch will execute, which includes appending the email to the DistinctEmails array and resetting the EmailCounter back to 0 (as explained in step 3.2).

I hope this provides a clearer breakdown of step 3.1. Let me know if you need further clarification on any part or if you encounter any issues!
User
I am getting an error with the condition action in the apply to each. The condition error is the following: "InvalidTemplate. Unable to process template language expressions for action 'Condition' at line '0' and column '0': 'The template language function 'greater' expects all of its parameters to be either integer or decimal numbers. Found invalid parameter types: "Array'.'."
ChatGPT

I apologize for the oversight. The error is due to the fact that the length function returns an integer, but the variables('EmailCounter') might be interpreted differently, causing a type mismatch.

Let's correct this:

    Ensure EmailCounter is an Integer: Double-check that the EmailCounter variable is initialized as an integer at the start of your flow.

    Modify the Condition:
        For the left side of the condition, use the expression to ensure it's treated as an integer:

        c

int(variables('EmailCounter'))

Keep the comparison as is greater than.
For the right side, continue using the expression:

less

        length(variables('DistinctEmails'))

By explicitly casting the EmailCounter variable to an integer using the int() function, we ensure that both sides of the condition are treated as integers, which should resolve the error.

After making these adjustments, save and test your flow again. Let me know if you encounter any further issues!
User
Ok I made all the changes you recommended, but the 'Apply to each' action is still having issues. The Condition action inside the apply to each loop is still resulting in "true" every time, when it should be displaying as false like you suggest. What can I do to fix this?
ChatGPT

I apologize for the confusion. Let's try a different approach to ensure we get distinct emails without relying on the counter method.
Approach: Using an Array and a Condition to Filter Distinct Emails

    Initialize an Empty Array Variable:
        At the start of your flow, initialize a variable named DistinctEmails of type Array and set its value to an empty array ([]).

    Loop Through SharePoint Items:
        Use the "Apply to each" control to loop through the items retrieved from the "Get items" SharePoint action.

    Inside the Loop:

        Add a Condition Control:
            Use the following expression to check if the current email is already in the DistinctEmails array:

            scss

            contains(variables('DistinctEmails'), items('Apply_to_each')?['EmployeeEmail'])

            This condition checks if the current email is contained in the DistinctEmails array.
            If the condition is true, it means the email is already in the array, and we do nothing.
            If the condition is false, it means the email is not in the array, and we proceed to the next step.

        Inside the "No" Branch of the Condition:
            Add an "Append to array variable" action.
                For the "Name" field, select the DistinctEmails variable.
                For the "Value" field, use the dynamic content to select the EmployeeEmail from the current SharePoint item. This will add the current email to the DistinctEmails array.

    After the Loop:
        You should now have an array (DistinctEmails) containing only unique email addresses.
        Proceed with the next steps in the flow, such as sending out emails to each address in the DistinctEmails array.

This approach should effectively filter out duplicate emails and only keep distinct ones in the DistinctEmails array. After implementing these steps, test the flow again and see if it works as expected. If there are still issues, we may need to look deeper into the flow's configuration and the data in SharePoint.
User
can you explain step 3 in mroe detail
ChatGPT

Certainly! Let's delve deeper into step 3, which is about processing each item from the SharePoint list and determining if the email from that item is unique.
3. Inside the "Apply to each" Loop:

When you're inside the "Apply to each" loop, you're essentially iterating over each item (or row) from your SharePoint list. For each of these items, you want to check if the email associated with that item is already in your DistinctEmails array.
3.1. Add a Condition Control:

    Inside the "Apply to each" loop, add a "Condition" control. This will allow you to evaluate whether a certain condition is true or false.

    For the condition, you want to check if the current email is already in the DistinctEmails array. To do this, use the following expression:

    scss

    contains(variables('DistinctEmails'), items('Apply_to_each')?['EmployeeEmail'])

        contains: This is a function that checks if a certain value (in this case, an email) is present in an array (in this case, DistinctEmails).
        variables('DistinctEmails'): This fetches the current state of the DistinctEmails array.
        items('Apply_to_each')?['EmployeeEmail']: This fetches the email from the current item in the SharePoint list.

    The condition will evaluate to:
        true if the email is already in the DistinctEmails array.
        false if the email is not in the array.

3.2. Handle the Outcome of the Condition:

    If the Condition is True (Yes branch):
        You don't need to do anything here because if the email is already in the array, it means we've processed it before.

    If the Condition is False (No branch):

        This means the email from the current SharePoint item is not in the DistinctEmails array, so it's a unique email that we haven't processed yet.

        Add an "Append to array variable" action:
            For the "Name" field, select the DistinctEmails variable from the dropdown.
            For the "Value" field, use the dynamic content pane to select the EmployeeEmail from the current SharePoint item. This action will add the current email to the DistinctEmails array.

By the end of the "Apply to each" loop, the DistinctEmails array will contain only unique email addresses from the SharePoint list.

I hope this provides a clearer breakdown of step 3. Let me know if you need further clarification on any part or if you encounter any issues!
User
okay but what is that condition supposed to be equal to?
ChatGPT

I apologize for missing that detail. The condition is checking if the email is contained within the DistinctEmails array.

Here's how you set up the condition:
3.1. Add a Condition Control:

    Inside the "Apply to each" loop, add a "Condition" control.

    For the condition, you'll use the contains function to check if the current email is in the DistinctEmails array.

        In the condition control, on the left side, enter the expression:

        scss

        contains(variables('DistinctEmails'), items('Apply_to_each')?['EmployeeEmail'])

        Set the middle part (the operator) to is equal to.

        On the right side, manually type in the value true.

So, the entire condition reads:

If the current email is contained in the DistinctEmails array (which will evaluate to true or false), is it equal to true?

    If the result is true, it means the email is already in the array.
    If the result is false, it means the email is not in the array and should be added.

3.2. Handle the Outcome of the Condition:

    If the Condition is True (Yes branch):
        You don't need to do anything here because if the email is already in the array, it means we've processed it before.

    If the Condition is False (No branch):
        Add the "Append to array variable" action to add the email to the DistinctEmails array.

I hope this clarifies the setup for the condition. Let me know if you have any further questions!
